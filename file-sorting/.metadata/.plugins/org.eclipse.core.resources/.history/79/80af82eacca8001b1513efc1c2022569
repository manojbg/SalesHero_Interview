package com.saleshero.application.service;

import com.saleshero.service.ReadFileService;
import org.junit.Assert;
import org.junit.Test;
import org.junit.jupiter.api.function.Executable;
import org.junit.rules.ExpectedException;
import org.junit.jupiter.api.Assertions;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@RunWith(MockitoJUnitRunner.class)
public class TestReadFileService {

    @InjectMocks
    private ReadFileService readFileService;

    @Mock
    private BufferedReader reader;

    @Mock
    private File file;
    
    @Test
    public void testReadingAFile() throws IOException
    {
    	String fileName = "files/filename.txt";
    	file = new File(fileName);
    	List<Integer> valueList = new ArrayList<Integer>();
    	List<Integer> expList = new ArrayList<Integer>();
    	expList.add(12);
    	expList.add(2324);
    	expList.add(23432);
    	expList.add(1);
    	expList.add(353454);
    	expList.add(-12321);
    	expList.add(0);
        Mockito.when(readFileService.readFileValues(fileName)).thenReturn(expList);
        List<Integer> values = readFileService.readFileValues(fileName);
        assertTrue(expList.size() == values.size() && expList.containsAll(values) && values.containsAll(expList));
    }
    
    @Test(expected = FileNotFoundException.class)
    public void testExceptionThrownForReadingFile() throws IOException {
        //BufferedReader bufferedReader = Mockito.mock(BufferedReader.class);
    	String fileName = "files/nofilename.txt";
        Assertions.assertThrows(FileNotFoundException.class, () -> readFileService.readFileValues(fileName));
        //Assertions.assertEquals("File not found to read values : ", exception.getMessage());
    }
    
  /* @Test
    private void testNumberCountWhileRead()
    {

    }

    @Test
    private void testWritingToFile()
    {

    }

    @Test
    private void testExceptionThrownForWritingFile()
    {

    }

    @Test
    private void testNumberCountWhileWrite()
    {

    }*/
}
